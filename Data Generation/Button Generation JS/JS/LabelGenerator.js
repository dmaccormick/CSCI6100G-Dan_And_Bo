class LabelInfo
{
    /* Feature 1 - BG Colour */
    SetBackgroundColour(r, g, b, a)
    {
        // Normalize the colour values between 0 - 1. Alpha is between 0 and 1 already so no need to
        const rNorm = r / 255.0;
        const gNorm = g / 255.0;
        const bNorm = b / 255.0;

        // Save the background colour as a string, with ~ as a separator between values
        this._backgroundColour = `[${rNorm}~${gNorm}~${bNorm}~${a}]`;
    }

    SetBackgroundColourWithName(colourName)
    {
        // This is the name of the colour (ex: "red", "green", etc)
        this._backgroundColour = colourName;
    }

    /* Feature 2 - Border Width */
    SetBorderWidth(width)
    {
        // Save the border width as a string
        this._borderWidth = `${width}`;
    }

    /* Feature 3 - Border Colour */
    SetBorderColour(r, g, b)
    {
        // Normalize the colour values between 0 - 1
        const rNorm = r / 255.0;
        const gNorm = g / 255.0;
        const bNorm = b / 255.0;

        // Save the border colour as a string, with ~ as a separator between values
        this._borderColour = `[${rNorm}~${gNorm}~${bNorm}]`;
    }

    /* Feature 4 - Border Style */
    SetBorderStyle(style)
    {
        // The border style is already a string so can go ahead and save it directly
        this._borderStyle = style;
    }

    /* Feature 5 - Font Size */
    SetFontSize(fontSize)
    {
        // Save the font size as a string
        this._fontSize = `${fontSize}`;
    }

    /* Feature 6 - Border Radius */
    SetBorderRadius(borderRadius)
    {
        // Save the border radius as a string
        this._borderRadius = `${borderRadius}`;
    }

    /* Feature 7 - Shadow Size */
    SetShadowWidth(shadowWidth)
    {
        // Save the shadow width as a string
        this._shadowWidth = `${shadowWidth}`;
    }

    /* Feature 8 - Shadow colour */
    SetShadowColour(r, g, b)
    {
        // Normalize the colour values between 0 - 1
        const rNorm = r / 255.0;
        const gNorm = g / 255.0;
        const bNorm = b / 255.0;

        // Save the shadow colour as a string, with ~ as a separator between values
        this._shadowColour = `[${rNorm}~${gNorm}~${bNorm}]`;
    }

    /* Export all of the features as one line, so it can be written as a CSV entry */
    ConvertToCSVEntry()
    {
        return `${this._backgroundColour},${this._borderWidth},${this._borderColour},${this._borderStyle},${this._fontSize},${this._borderRadius},${this._shadowWidth},${this._shadowColour}\n`;
    } 
}



/*----------  The label management functions  ----------*/
// The array that holds all of the current dataset's labels
let labelObjects;

// The previously generated URL for the labels
let labelTextFileURL;

StartLabelGeneration = () =>
{
    // Clear the existing labels
    labelObjects = [];
}

AddLabel = labelInfo =>
{
    // Push the new label info
    labelObjects.push(labelInfo);
}

// Found here: https://stackoverflow.com/questions/21012580/is-it-possible-to-write-data-to-file-using-only-javascript
const MakeTextFile = () =>
{
    // Going to put the set of strings together into one set of text
    let labelText = '';

    // Loop through all of the labels and append their information
    for (let i = 0; i < labelObjects.length; i++) 
    {
        // Prepend the label's ID
        labelText += `${i},`;

        // Then put the full label CSV entry
        labelText += labelObjects[i].ConvertToCSVEntry();
    }

    // Convert the string into a file
    const data = new Blob([labelText], {type: "text/plain"});

    // Prevent memory leaks by ensuring the URL isn't duplicated
    if (labelTextFileURL !== null) {
        window.URL.revokeObjectURL(labelTextFileURL);
    }

    // Generate a URL for the file
    labelTextFileURL = window.URL.createObjectURL(data);

    // Return the newly generated URL
    return labelTextFileURL;
}

// Found here: https://stackoverflow.com/questions/21012580/is-it-possible-to-write-data-to-file-using-only-javascript
DownloadLabels = () =>
{
    // Create a link which points to the URL generated by the MakeTextFile() function
    const link = document.createElement('a');
    link.setAttribute("download", "ButtonLabels.csv");
    link.href = MakeTextFile();

    // Execute the download by faking a mouse click
    window.requestAnimationFrame(function(){
        const event = new MouseEvent('click');
        link.dispatchEvent(event);
    }, false);
}